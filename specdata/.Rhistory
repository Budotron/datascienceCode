# allcc<-allcc[!discardmonitor, ]
# print(nrow(allcc))
discardmonitor
directory<-"specdata"
threshold<-0
setwd(paste("/Volumes/Media and Stuff/code", directory, sep="/"))
allcc<-complete(directory = directory, id = 1:332)
print(nrow(allcc))
discardmonitor<-(allcc$nobs<=threshold)
allcc<-allcc[!discardmonitor, ]
print(nrow(allcc))
directory<-"specdata"
threshold<-150
setwd(paste("/Volumes/Media and Stuff/code", directory, sep="/"))
allcc<-complete(directory = directory, id = 1:332)
print(nrow(allcc))
discardmonitor<-(allcc$nobs<=threshold)
allcc<-allcc[!discardmonitor, ]
print(nrow(allcc))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
setwd(paste("/Volumes/Media and Stuff/code", directory, sep="/"))
# The following code uses the monitor id numbers to construct a character vector
# of length 1 with the extension ".csv", and appends one or two zeros to the
# front of the input number to match the filenames, if necessary. This is then
# used to read the csv data appropriate to that monitor.
filenames<-vector(length = length(id))
for (i in 1:length(id)){
numdigits<-nchar(id[i])
if (numdigits==1){
tag<-paste("00",  id[i], sep="")
}
else if (numdigits==2){
tag<-paste("0",  id[i], sep="")
}
else {
tag<-as.character(id[i]);
}
filenames[i]<-paste(tag, ".csv", sep="")
}
# create an empty vector of the same length as "id" to store the total count of
# complete cases for each monitor id
nobs<-vector(length = length(id))
# create a data frame containing the monitor id numbers and the (initially empty)
# nobs vector
cc<-data.frame(id, nobs) #cc for complete cases
# populate the nobs column of the dataframe
for (i in 1:length(filenames)){
idset<-read.csv(filenames[i])
idset<-na.omit(idset) # remove all rows containing an "NA"
cc$nobs[i]<-nrow(idset)
}
#         print(cc)
}
directory<-"specdata"
threshold<-150
setwd(paste("/Volumes/Media and Stuff/code", directory, sep="/"))
allcc<-complete(directory = directory, id = 1:332)
print(nrow(allcc))
discardmonitor<-(allcc$nobs<=threshold)
allcc<-allcc[!discardmonitor, ]
print(nrow(allcc))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
setwd(paste("/Volumes/Media and Stuff/code", directory, sep="/"))
# The following code uses the monitor id numbers to construct a character vector
# of length 1 with the extension ".csv", and appends one or two zeros to the
# front of the input number to match the filenames, if necessary. This is then
# used to read the csv data appropriate to that monitor.
filenames<-vector(length = length(id))
for (i in 1:length(id)){
numdigits<-nchar(id[i])
if (numdigits==1){
tag<-paste("00",  id[i], sep="")
}
else if (numdigits==2){
tag<-paste("0",  id[i], sep="")
}
else {
tag<-as.character(id[i]);
}
filenames[i]<-paste(tag, ".csv", sep="")
}
# create an empty vector of the same length as "id" to store the total count of
# complete cases for each monitor id
nobs<-vector(length = length(id))
# create a data frame containing the monitor id numbers and the (initially empty)
# nobs vector
cc<-data.frame(id, nobs) #cc for complete cases
# populate the nobs column of the dataframe
for (i in 1:length(filenames)){
idset<-read.csv(filenames[i])
idset<-na.omit(idset) # remove all rows containing an "NA"
cc$nobs[i]<-nrow(idset)
}
print(cc)
}
directory<-"specdata"
threshold<-150
setwd(paste("/Volumes/Media and Stuff/code", directory, sep="/"))
allcc<-complete(directory = directory, id = 1:332)
print(nrow(allcc))
discardmonitor<-(allcc$nobs<=threshold)
allcc<-allcc[!discardmonitor, ]
print(nrow(allcc))
allcc
allcc$nobs>=150
View(allcc)
??cor
?cor
cor(1:10, 2:11)
complete(directory = "specdata", id = 1)
directory<-"specdata"
threshold<-150
corrmat<-matrix()
setwd(paste("/Volumes/Media and Stuff/code", directory, sep="/"))
allcc<-complete(directory = directory, id = 1:332)
discardmonitor<-(allcc$nobs<=threshold)
allcc<-allcc[!discardmonitor, ]
filenames<-vector(length = nrow(allcc))
j<-1
for (i in (allcc$id)){
if (numdigits==1){
tag<-paste("00",  id[i], sep="")
}
else if (numdigits==2){
tag<-paste("0",  id[i], sep="")
}
else {
tag<-as.character(id[i]);
}
filenames[i]<-paste(tag, ".csv", sep="")
idset<-read.csv(filenames[i])
idset<-na.omit(idset)
corrmat[j]<-cor(idset$nitrate, idset$sulfate)
j<-j+1
}
directory<-"specdata"
threshold<-150
corrmat<-matrix()
setwd(paste("/Volumes/Media and Stuff/code", directory, sep="/"))
allcc<-complete(directory = directory, id = 1:332)
discardmonitor<-(allcc$nobs<=threshold)
allcc<-allcc[!discardmonitor, ]
filenames<-vector(length = nrow(allcc))
j<-1
for (i in (allcc$id)){
print(i)
numdigits<-nchar(id[i])
if (numdigits==1){
tag<-paste("00",  id[i], sep="")
}
else if (numdigits==2){
tag<-paste("0",  id[i], sep="")
}
else {
tag<-as.character(id[i]);
}
filenames[i]<-paste(tag, ".csv", sep="")
idset<-read.csv(filenames[i])
idset<-na.omit(idset)
corrmat[j]<-cor(idset$nitrate, idset$sulfate)
j<-j+1
}
directory<-"specdata"
threshold<-150
corrmat<-matrix()
setwd(paste("/Volumes/Media and Stuff/code", directory, sep="/"))
allcc<-complete(directory = directory, id = 1:332)
discardmonitor<-(allcc$nobs<=threshold)
allcc<-allcc[!discardmonitor, ]
filenames<-vector(length = nrow(allcc))
j<-1
for (i in (allcc$id)){
print(i)
numdigits<-nchar(allcc$id[j])
if (numdigits==1){
tag<-paste("00",  allcc$id[j], sep="")
}
else if (numdigits==2){
tag<-paste("0",  allcc$id[j], sep="")
}
else {
tag<-as.character(allcc$id[j]);
}
filenames[i]<-paste(tag, ".csv", sep="")
idset<-read.csv(filenames[i])
idset<-na.omit(idset)
corrmat[j]<-cor(idset$nitrate, idset$sulfate)
j<-j+1
}
corrmat
summary(corrmat)
directory<-"specdata"
threshold<-400
corrmat<-matrix()
setwd(paste("/Volumes/Media and Stuff/code", directory, sep="/"))
allcc<-complete(directory = directory, id = 1:332)
discardmonitor<-(allcc$nobs<=threshold)
allcc<-allcc[!discardmonitor, ]
filenames<-vector(length = nrow(allcc))
j<-1
for (i in (allcc$id)){
print(i)
numdigits<-nchar(allcc$id[j])
if (numdigits==1){
tag<-paste("00",  allcc$id[j], sep="")
}
else if (numdigits==2){
tag<-paste("0",  allcc$id[j], sep="")
}
else {
tag<-as.character(allcc$id[j]);
}
filenames[i]<-paste(tag, ".csv", sep="")
idset<-read.csv(filenames[i])
idset<-na.omit(idset)
corrmat[j]<-cor(idset$nitrate, idset$sulfate)
j<-j+1
}
summary (corrmat)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
setwd(paste("/Volumes/Media and Stuff/code", directory, sep="/"))
# Obtain the numbers of complete cases for every monitor id
allcc<-complete(directory = directory, id = 1:332)
# Retain only those data for which the number of complete cases exceeds the
# specificed threshold
discardmonitor<-(allcc$nobs<=threshold)
allcc<-allcc[!discardmonitor, ]
# Initialize the vector that will hold the correlations
corvec<-vector()
# For each monitor id in the allcc dataframe, the following reads the .csv file,
# calculates the correlation between the sulfate and nitrate values for which
# there are complete cases, and assigns the jth corrlation calculated to the jth
# position of the corvec vector
filenames<-vector(length = nrow(allcc))
j<-1
for (i in (allcc$id)){
print(i)
numdigits<-nchar(allcc$id[j])
if (numdigits==1){
tag<-paste("00",  allcc$id[j], sep="")
}
else if (numdigits==2){
tag<-paste("0",  allcc$id[j], sep="")
}
else {
tag<-as.character(allcc$id[j]);
}
filenames[i]<-paste(tag, ".csv", sep="")
idset<-read.csv(filenames[i])
idset<-na.omit(idset)
corvec[j]<-cor(idset$nitrate, idset$sulfate)
j<-j+1
}
}
corvec
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
setwd(paste("/Volumes/Media and Stuff/code", directory, sep="/"))
# Obtain the numbers of complete cases for every monitor id
allcc<-complete(directory = directory, id = 1:332)
# Retain only those data for which the number of complete cases exceeds the
# specificed threshold
discardmonitor<-(allcc$nobs<=threshold)
allcc<-allcc[!discardmonitor, ]
# Initialize the vector that will hold the correlations
corvec<-vector()
# For each monitor id in the allcc dataframe, the following reads the .csv file,
# calculates the correlation between the sulfate and nitrate values for which
# there are complete cases, and assigns the jth corrlation calculated to the jth
# position of the corvec vector
filenames<-vector(length = nrow(allcc))
j<-1
for (i in (allcc$id)){
print(i)
numdigits<-nchar(allcc$id[j])
if (numdigits==1){
tag<-paste("00",  allcc$id[j], sep="")
}
else if (numdigits==2){
tag<-paste("0",  allcc$id[j], sep="")
}
else {
tag<-as.character(allcc$id[j]);
}
filenames[i]<-paste(tag, ".csv", sep="")
idset<-read.csv(filenames[i])
idset<-na.omit(idset)
corvec[j]<-cor(idset$nitrate, idset$sulfate)
j<-j+1
}
x<-corvec
}
x
corr
corr(directory = "specdata", threshold = 150)
x
corr(directory = "specdata", threshold = 150)
x
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
setwd(paste("/Volumes/Media and Stuff/code", directory, sep="/"))
# Obtain the numbers of complete cases for every monitor id
allcc<-complete(directory = directory, id = 1:332)
# Retain only those data for which the number of complete cases exceeds the
# specificed threshold
discardmonitor<-(allcc$nobs<=threshold)
allcc<-allcc[!discardmonitor, ]
# Initialize the vector that will hold the correlations
corvec<-vector()
# For each monitor id in the allcc dataframe, the following reads the .csv file,
# calculates the correlation between the sulfate and nitrate values for which
# there are complete cases, and assigns the jth corrlation calculated to the jth
# position of the corvec vector
filenames<-vector(length = nrow(allcc))
j<-1
for (i in (allcc$id)){
numdigits<-nchar(allcc$id[j])
if (numdigits==1){
tag<-paste("00",  allcc$id[j], sep="")
}
else if (numdigits==2){
tag<-paste("0",  allcc$id[j], sep="")
}
else {
tag<-as.character(allcc$id[j]);
}
filenames[i]<-paste(tag, ".csv", sep="")
idset<-read.csv(filenames[i])
idset<-na.omit(idset)
corvec[j]<-cor(idset$nitrate, idset$sulfate)
j<-j+1
}
corvec
}
corvec
corr(directory = "specdata", threshold = 150)
x<-corr(directory = "specdata", threshold = 150)
x
head(x)
summary(x)
x<-corr(directory = "specdata", threshold = 5000)
summary(x)
x<-corr(directory = "specdata")
summary(x)
lengthx
length(x)
source("submitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
setwd(paste("/Volumes/Media and Stuff/code", directory, sep="/"))
# Obtain the numbers of complete cases for every monitor id
allcc<-complete(directory = directory, id = 1:332)
# Retain only those data for which the number of complete cases exceeds the
# specificed threshold
discardmonitor<-(allcc$nobs<=threshold)
allcc<-allcc[!discardmonitor, ]
# Initialize the vector that will hold the correlations
corvec<-vector(length = nrow(allcc))
# For each monitor id in the allcc dataframe, the following reads the .csv file,
# calculates the correlation between the sulfate and nitrate values for which
# there are complete cases, and assigns the jth corrlation calculated to the jth
# position of the corvec vector
filenames<-vector(length = nrow(allcc))
j<-1
for (i in (allcc$id)){
numdigits<-nchar(allcc$id[j])
if (numdigits==1){
tag<-paste("00",  allcc$id[j], sep="")
}
else if (numdigits==2){
tag<-paste("0",  allcc$id[j], sep="")
}
else {
tag<-as.character(allcc$id[j]);
}
filenames[i]<-paste(tag, ".csv", sep="")
idset<-read.csv(filenames[i])
idset<-na.omit(idset)
corvec[j]<-cor(idset$nitrate, idset$sulfate)
j<-j+1
}
corvec
}
x<-corr(directory = "specdata")
summary(x)
submit()
submit
submit()
submit()
submit
submit()
submit()
submit()
submit()
submit()
submit()
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
setwd(paste("/Volumes/Media and Stuff/code", directory, sep="/"))
# The following code uses the monitor id numbers to construct a character vector
# of length 1 with the extension ".csv", and appends one or two zeros to the
# front of the input number to match the filenames, if necessary. This is then
# used to read the csv data appropriate to that monitor.
filenames<-vector(length = length(id))
for (i in 1:length(id)){
numdigits<-nchar(id[i])
if (numdigits==1){
tag<-paste("00",  id[i], sep="")
}
else if (numdigits==2){
tag<-paste("0",  id[i], sep="")
}
else {
tag<-as.character(id[i]);
}
filenames[i]<-paste(tag, ".csv", sep="")
}
# The following merges all files in "filenames" into a single data frame. It is
# based on the mailing list topic "Import Multiple csv files and merge into one
# Master file" (https://stat.ethz.ch/pipermail/r-help/2010-October/255593.html)
mergedfiles<-do.call("rbind", lapply(filenames, read.csv, header = TRUE))
# The mean of the pollutant of interest is obtained by the following
if (pollutant=="nitrate"){
reqdmean<-mean(mergedfiles$nitrate, na.rm = T)
} else {
reqdmean<-mean(mergedfiles$sulfate, na.rm = T)
}
reqdmean
}
submit()
pollutantmean(directory = "specdata", pollutant = "sulfate", id = 1:10)
submit()
submit()
pollutantmean(directory = "specdata", pollutant = "sulfate", id = 1:10)
submit()
submit()
submit()
submit()
cube<-function(x, n){
x^n
}
cube(3)
x<-1:10
if(x>5){x<-0}
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
formals(complete)
?sd
